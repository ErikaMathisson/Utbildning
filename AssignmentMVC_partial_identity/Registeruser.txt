  //if (User.Identity.IsAuthenticated)
        //{

        <div class="form-group">
            @/*Html.LabelFor(model => model.Country)*/
         <!--   <input name="Country" class="form-control" />  -->
            @/*Html.Action("GetCountries")*/



        </div>

        //}


        <div class="form-group">
            @/*Html.LabelFor(model => model.City)*/
            <input name="City" class="form-control" />

        </div>

///////////////////////////////////////////////////////////////////

  <p> enter city name:</p>
                <input name="cityname" class="form-control" />
                <br />

                <input type="submit" value="add city" class="btn btn-sm btn-info" />


                if(User.Identity.IsAuthenticated)
                            {

                    <div class="form-group">
                           <input name="Country" class="form-control" />
                        @Html.Action("AddCountry")

                    </div>

                            }


                    <div class="form-group">

                        <input name="City" class="form-control" />

                    </div>





  



////////////////////////////////////////////////////////////////////////

 //[AllowAnonymous]
        //[HttpPost]
        //public async Task<ActionResult> Reg([Bind(Include = "Email, UserName, PassWord")]RegUserViewModel vm)
        //{
        //    if (ModelState.IsValid)
        //    {
        //        var user = new ApplicationUser
        //        {
        //            UserName = vm.UserName,
        //            Email = vm.Email

        //        };

        //        var admin = await UserManager.FindByEmailAsync("admin@admin.se");

        //        if (admin == null)
        //        {
        //            await RoleManager.CreateAsync(new IdentityRole("Admin"));
        //            await RoleManager.CreateAsync(new IdentityRole("User"));
        //            var regStatus = await UserManager.CreateAsync(user, vm.Password);

        //            var uAdmin = await UserManager.FindByEmailAsync("admin@admin.se");
        //            await UserManager.AddToRoleAsync(uAdmin.Id, "Admin");
        //            return RedirectToAction("Login");

        //        }



        //        var regStatusUser = await UserManager.CreateAsync(user, vm.Password);

        //        if (regStatusUser.Succeeded)
        //        {
        //            var registeredUser = await UserManager.FindByEmailAsync(vm.Email);
        //            await UserManager.AddToRoleAsync(registeredUser.Id, "User");
        //            return RedirectToAction("Login");

        //        }
        //    }

        //    return View();
        //}


///////////////////////////////////////////////////////////////////////////////////////////////////

    //[AllowAnonymous]
        //[HttpPost]
        //public ActionResult AddUser(ApplicationUserViewModel model)
        //{
        //    if (ModelState.IsValid)
        //    {
        //        var context = new ApplicationDbContext();
        //        var userStore = new UserStore<ApplicationUser>(context);
        //        var userManager = new UserManager<ApplicationUser>(userStore);

        //        var result = userManager.Create(user: new ApplicationUser()
        //        {
        //            UserName = model.UserName,
        //            Email = model.Email,

        //        }, password: model.Password);

        //        if (!result.Succeeded)
        //        {
        //            ViewBag.Message = result;
        //        }
        //        else
        //        {
        //            return RedirectToAction("Index", "Home");
        //        }

        //    }
        //    return View("RegisterUser", model);
        //}



/////////////////////////////////////////////////////////////////////////////////



                //var admin = await UserManager.FindByNameAsync("admin");

                //if (admin == null)
                //{
                //    await RoleManager.CreateAsync(new IdentityRole("Admin"));
                //    await RoleManager.CreateAsync(new IdentityRole("User"));
                //    var regStatus = await UserManager.CreateAsync(user, model.Password);

                //    var addAdmin = await UserManager.FindByNameAsync("admin");
                //    await UserManager.AddToRoleAsync(addAdmin.Id, "Admin");
                //    return RedirectToAction("Login");
                //}

//////////////////////////////////////////////////////////////////////////////////////////////

   //public async Task<ActionResult> Login(LoginViewModel model, string returnUrl)
        //{
        //    if (!ModelState.IsValid)
        //    {
        //        return View(model);
        //    }

        //    // This doesn't count login failures towards account lockout
        //    // To enable password failures to trigger account lockout, change to shouldLockout: true
        //    var result = await SignInManager.PasswordSignInAsync(model.Email, model.Password, model.RememberMe, shouldLockout: false);
        //    switch (result)
        //    {
        //        case SignInStatus.Success:
        //            return RedirectToLocal(returnUrl);
        //        case SignInStatus.LockedOut:
        //            return View("Lockout");
        //        case SignInStatus.RequiresVerification:
        //            return RedirectToAction("SendCode", new { ReturnUrl = returnUrl, RememberMe = model.RememberMe });
        //        case SignInStatus.Failure:
        //        default:
        //            ModelState.AddModelError("", "Invalid login attempt.");
        //            return View(model);
        //    }
        //}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



     



        // todo: login in with email doesn't work with method passwordsigninasync... change
        //todo: check the returnUrl parameter doesn't work?
        // async action for logging in a user
        //[AllowAnonymous]
        //[HttpPost]
        //public async Task<ActionResult> Logggin([Bind(Include = "UserEmail, PassWord")]LogInViewModel2 vm, string ReturnUrl)
        //{
        //    if (ModelState.IsValid)
        //    {
        //        var user = await UserManager.FindByEmailAsync(vm.UserEmail);
        //        if (user == null)
        //        {
        //            user = await UserManager.FindByNameAsync(vm.UserEmail);

        //        }

        //        if (user != null)
        //        {
        //            var signInStatus = await SignIn.PasswordSignInAsync(vm.UserEmail, vm.Password, false, true);

        //            switch (signInStatus)
        //            {
        //                case SignInStatus.Success:
        //                    if (!string.IsNullOrWhiteSpace(ReturnUrl))
        //                    {
        //                        return Redirect(ReturnUrl);

        //                    }
        //                    return RedirectToAction("Index");

        //                //case SignInStatus.LockedOut:
        //                //    break;
        //                //case SignInStatus.RequiresVerification:
        //                //    break;
        //                case SignInStatus.Failure:
        //                    ViewBag.Errors = "Incorrect username or password";
        //                    break;
        //                default:
        //                    break;
        //            }
        //        }
        //    }
        //    return View();
        //}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        // todo: login in with email doesn't work with method passwordsigninasync... change
        //todo: check the returnUrl parameter doesn't work?
        // async action for logging in a user
        //[AllowAnonymous]
        //[HttpPost]
        //public async Task<ActionResult> Logggin([Bind(Include = "UserEmail, PassWord")]LogInViewModel2 vm, string ReturnUrl)
        //{
        //    if (ModelState.IsValid)
        //    {
        //        var user = await UserManager.FindByEmailAsync(vm.UserEmail);
        //        if (user == null)
        //        {
        //            user = await UserManager.FindByNameAsync(vm.UserEmail);

        //        }

        //        if (user != null)
        //        {
        //            var signInStatus = await SignIn.PasswordSignInAsync(vm.UserEmail, vm.Password, false, true);

        //            switch (signInStatus)
        //            {
        //                case SignInStatus.Success:
        //                    if (!string.IsNullOrWhiteSpace(ReturnUrl))
        //                    {
        //                        return Redirect(ReturnUrl);

        //                    }
        //                    return RedirectToAction("Index");

        //                //case SignInStatus.LockedOut:
        //                //    break;
        //                //case SignInStatus.RequiresVerification:
        //                //    break;
        //                case SignInStatus.Failure:
        //                    ViewBag.Errors = "Incorrect username or password";
        //                    break;
        //                default:
        //                    break;
        //            }
        //        }
        //    }
        //    return View();
        //}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////



@{ 

    var SelectedCountry = 0;

}
<select onchange="$('#SelectedCountry').val = this.value" value="Country" class="form-control">
    @if(Model.Count >0)
    {

        foreach (var country in Model)
        {
            <option value="@country.Id">@country.CountryName</option>

        }

    }
    
</select>

<input id="selectedCountry"   type="hidden" name="selectedCountry" value="@SelectedCountry" />

<select value="City" class="form-control">
    @if (Model.Count > 0)
    {

        if (Model[SelectedCountry].Cities.Count > 0)
        {

            foreach (var city in Model[SelectedCountry].Cities)
            {
                <option value="@city.Id">@city.CityName</option>

            }

        }


    }

</select>


<script>
    function getCities(val) {

        $.ajax({
            
            url: '/Home/GetCities',
            data: {

                id: val
            },
            
            
            


        })
    }
</script>


////////////////////////////////////////////////////////////////////////////////////////////////////












      









